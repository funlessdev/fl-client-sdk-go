/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MixedResultsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MixedResultsData{}

// MixedResultsData struct for MixedResultsData
type MixedResultsData struct {
	// The name of the function
	Name *string `json:"name,omitempty"`
	// The results of event connection, both successful and failed
	Events []MixedResultsDataEventsInner `json:"events,omitempty"`
	// The results of sink connection, both successful and failed
	Sinks []MixedResultsDataSinksInner `json:"sinks,omitempty"`
	SinksMetadata *MixedResultsDataSinksMetadata `json:"sinks_metadata,omitempty"`
	EventsMetadata *MixedResultsDataEventsMetadata `json:"events_metadata,omitempty"`
}

// NewMixedResultsData instantiates a new MixedResultsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedResultsData() *MixedResultsData {
	this := MixedResultsData{}
	return &this
}

// NewMixedResultsDataWithDefaults instantiates a new MixedResultsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedResultsDataWithDefaults() *MixedResultsData {
	this := MixedResultsData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MixedResultsData) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedResultsData) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MixedResultsData) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MixedResultsData) SetName(v string) {
	o.Name = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *MixedResultsData) GetEvents() []MixedResultsDataEventsInner {
	if o == nil || isNil(o.Events) {
		var ret []MixedResultsDataEventsInner
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedResultsData) GetEventsOk() ([]MixedResultsDataEventsInner, bool) {
	if o == nil || isNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *MixedResultsData) HasEvents() bool {
	if o != nil && !isNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []MixedResultsDataEventsInner and assigns it to the Events field.
func (o *MixedResultsData) SetEvents(v []MixedResultsDataEventsInner) {
	o.Events = v
}

// GetSinks returns the Sinks field value if set, zero value otherwise.
func (o *MixedResultsData) GetSinks() []MixedResultsDataSinksInner {
	if o == nil || isNil(o.Sinks) {
		var ret []MixedResultsDataSinksInner
		return ret
	}
	return o.Sinks
}

// GetSinksOk returns a tuple with the Sinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedResultsData) GetSinksOk() ([]MixedResultsDataSinksInner, bool) {
	if o == nil || isNil(o.Sinks) {
		return nil, false
	}
	return o.Sinks, true
}

// HasSinks returns a boolean if a field has been set.
func (o *MixedResultsData) HasSinks() bool {
	if o != nil && !isNil(o.Sinks) {
		return true
	}

	return false
}

// SetSinks gets a reference to the given []MixedResultsDataSinksInner and assigns it to the Sinks field.
func (o *MixedResultsData) SetSinks(v []MixedResultsDataSinksInner) {
	o.Sinks = v
}

// GetSinksMetadata returns the SinksMetadata field value if set, zero value otherwise.
func (o *MixedResultsData) GetSinksMetadata() MixedResultsDataSinksMetadata {
	if o == nil || isNil(o.SinksMetadata) {
		var ret MixedResultsDataSinksMetadata
		return ret
	}
	return *o.SinksMetadata
}

// GetSinksMetadataOk returns a tuple with the SinksMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedResultsData) GetSinksMetadataOk() (*MixedResultsDataSinksMetadata, bool) {
	if o == nil || isNil(o.SinksMetadata) {
		return nil, false
	}
	return o.SinksMetadata, true
}

// HasSinksMetadata returns a boolean if a field has been set.
func (o *MixedResultsData) HasSinksMetadata() bool {
	if o != nil && !isNil(o.SinksMetadata) {
		return true
	}

	return false
}

// SetSinksMetadata gets a reference to the given MixedResultsDataSinksMetadata and assigns it to the SinksMetadata field.
func (o *MixedResultsData) SetSinksMetadata(v MixedResultsDataSinksMetadata) {
	o.SinksMetadata = &v
}

// GetEventsMetadata returns the EventsMetadata field value if set, zero value otherwise.
func (o *MixedResultsData) GetEventsMetadata() MixedResultsDataEventsMetadata {
	if o == nil || isNil(o.EventsMetadata) {
		var ret MixedResultsDataEventsMetadata
		return ret
	}
	return *o.EventsMetadata
}

// GetEventsMetadataOk returns a tuple with the EventsMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedResultsData) GetEventsMetadataOk() (*MixedResultsDataEventsMetadata, bool) {
	if o == nil || isNil(o.EventsMetadata) {
		return nil, false
	}
	return o.EventsMetadata, true
}

// HasEventsMetadata returns a boolean if a field has been set.
func (o *MixedResultsData) HasEventsMetadata() bool {
	if o != nil && !isNil(o.EventsMetadata) {
		return true
	}

	return false
}

// SetEventsMetadata gets a reference to the given MixedResultsDataEventsMetadata and assigns it to the EventsMetadata field.
func (o *MixedResultsData) SetEventsMetadata(v MixedResultsDataEventsMetadata) {
	o.EventsMetadata = &v
}

func (o MixedResultsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MixedResultsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !isNil(o.Sinks) {
		toSerialize["sinks"] = o.Sinks
	}
	if !isNil(o.SinksMetadata) {
		toSerialize["sinks_metadata"] = o.SinksMetadata
	}
	if !isNil(o.EventsMetadata) {
		toSerialize["events_metadata"] = o.EventsMetadata
	}
	return toSerialize, nil
}

type NullableMixedResultsData struct {
	value *MixedResultsData
	isSet bool
}

func (v NullableMixedResultsData) Get() *MixedResultsData {
	return v.value
}

func (v *NullableMixedResultsData) Set(val *MixedResultsData) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedResultsData) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedResultsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedResultsData(val *MixedResultsData) *NullableMixedResultsData {
	return &NullableMixedResultsData{value: val, isSet: true}
}

func (v NullableMixedResultsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedResultsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


