/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModuleName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModuleName{}

// ModuleName struct for ModuleName
type ModuleName struct {
	Module *SubjectNameSubject `json:"module,omitempty"`
}

// NewModuleName instantiates a new ModuleName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModuleName() *ModuleName {
	this := ModuleName{}
	return &this
}

// NewModuleNameWithDefaults instantiates a new ModuleName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModuleNameWithDefaults() *ModuleName {
	this := ModuleName{}
	return &this
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *ModuleName) GetModule() SubjectNameSubject {
	if o == nil || IsNil(o.Module) {
		var ret SubjectNameSubject
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModuleName) GetModuleOk() (*SubjectNameSubject, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *ModuleName) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given SubjectNameSubject and assigns it to the Module field.
func (o *ModuleName) SetModule(v SubjectNameSubject) {
	o.Module = &v
}

func (o ModuleName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModuleName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	return toSerialize, nil
}

type NullableModuleName struct {
	value *ModuleName
	isSet bool
}

func (v NullableModuleName) Get() *ModuleName {
	return v.value
}

func (v *NullableModuleName) Set(val *ModuleName) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleName) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleName(val *ModuleName) *NullableModuleName {
	return &NullableModuleName{value: val, isSet: true}
}

func (v NullableModuleName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


