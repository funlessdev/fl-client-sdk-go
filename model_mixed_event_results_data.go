/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MixedEventResultsData struct for MixedEventResultsData
type MixedEventResultsData struct {
	// The name of the function
	Name *string `json:"name,omitempty"`
	// The results of event connection, both successful and failed
	Events []MixedEventResultsDataEventsInner `json:"events,omitempty"`
	Metadata *MixedEventResultsDataMetadata `json:"metadata,omitempty"`
}

// NewMixedEventResultsData instantiates a new MixedEventResultsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedEventResultsData() *MixedEventResultsData {
	this := MixedEventResultsData{}
	return &this
}

// NewMixedEventResultsDataWithDefaults instantiates a new MixedEventResultsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedEventResultsDataWithDefaults() *MixedEventResultsData {
	this := MixedEventResultsData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MixedEventResultsData) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedEventResultsData) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MixedEventResultsData) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MixedEventResultsData) SetName(v string) {
	o.Name = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *MixedEventResultsData) GetEvents() []MixedEventResultsDataEventsInner {
	if o == nil || isNil(o.Events) {
		var ret []MixedEventResultsDataEventsInner
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedEventResultsData) GetEventsOk() ([]MixedEventResultsDataEventsInner, bool) {
	if o == nil || isNil(o.Events) {
    return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *MixedEventResultsData) HasEvents() bool {
	if o != nil && !isNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []MixedEventResultsDataEventsInner and assigns it to the Events field.
func (o *MixedEventResultsData) SetEvents(v []MixedEventResultsDataEventsInner) {
	o.Events = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *MixedEventResultsData) GetMetadata() MixedEventResultsDataMetadata {
	if o == nil || isNil(o.Metadata) {
		var ret MixedEventResultsDataMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedEventResultsData) GetMetadataOk() (*MixedEventResultsDataMetadata, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *MixedEventResultsData) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given MixedEventResultsDataMetadata and assigns it to the Metadata field.
func (o *MixedEventResultsData) SetMetadata(v MixedEventResultsDataMetadata) {
	o.Metadata = &v
}

func (o MixedEventResultsData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableMixedEventResultsData struct {
	value *MixedEventResultsData
	isSet bool
}

func (v NullableMixedEventResultsData) Get() *MixedEventResultsData {
	return v.value
}

func (v *NullableMixedEventResultsData) Set(val *MixedEventResultsData) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedEventResultsData) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedEventResultsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedEventResultsData(val *MixedEventResultsData) *NullableMixedEventResultsData {
	return &NullableMixedEventResultsData{value: val, isSet: true}
}

func (v NullableMixedEventResultsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedEventResultsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


