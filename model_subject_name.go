/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubjectName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubjectName{}

// SubjectName struct for SubjectName
type SubjectName struct {
	Subject *SubjectNameSubject `json:"subject,omitempty"`
}

// NewSubjectName instantiates a new SubjectName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectName() *SubjectName {
	this := SubjectName{}
	return &this
}

// NewSubjectNameWithDefaults instantiates a new SubjectName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectNameWithDefaults() *SubjectName {
	this := SubjectName{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SubjectName) GetSubject() SubjectNameSubject {
	if o == nil || IsNil(o.Subject) {
		var ret SubjectNameSubject
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectName) GetSubjectOk() (*SubjectNameSubject, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SubjectName) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given SubjectNameSubject and assigns it to the Subject field.
func (o *SubjectName) SetSubject(v SubjectNameSubject) {
	o.Subject = &v
}

func (o SubjectName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubjectName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

type NullableSubjectName struct {
	value *SubjectName
	isSet bool
}

func (v NullableSubjectName) Get() *SubjectName {
	return v.value
}

func (v *NullableSubjectName) Set(val *SubjectName) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectName) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectName(val *SubjectName) *NullableSubjectName {
	return &NullableSubjectName{value: val, isSet: true}
}

func (v NullableSubjectName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


