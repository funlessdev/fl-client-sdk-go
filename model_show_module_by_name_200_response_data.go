/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ShowModuleByName200ResponseData struct for ShowModuleByName200ResponseData
type ShowModuleByName200ResponseData struct {
	Name *string `json:"name,omitempty"`
	Functions []string `json:"functions,omitempty"`
}

// NewShowModuleByName200ResponseData instantiates a new ShowModuleByName200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShowModuleByName200ResponseData() *ShowModuleByName200ResponseData {
	this := ShowModuleByName200ResponseData{}
	return &this
}

// NewShowModuleByName200ResponseDataWithDefaults instantiates a new ShowModuleByName200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShowModuleByName200ResponseDataWithDefaults() *ShowModuleByName200ResponseData {
	this := ShowModuleByName200ResponseData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ShowModuleByName200ResponseData) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowModuleByName200ResponseData) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ShowModuleByName200ResponseData) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ShowModuleByName200ResponseData) SetName(v string) {
	o.Name = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *ShowModuleByName200ResponseData) GetFunctions() []string {
	if o == nil || isNil(o.Functions) {
		var ret []string
		return ret
	}
	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowModuleByName200ResponseData) GetFunctionsOk() ([]string, bool) {
	if o == nil || isNil(o.Functions) {
    return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *ShowModuleByName200ResponseData) HasFunctions() bool {
	if o != nil && !isNil(o.Functions) {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []string and assigns it to the Functions field.
func (o *ShowModuleByName200ResponseData) SetFunctions(v []string) {
	o.Functions = v
}

func (o ShowModuleByName200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Functions) {
		toSerialize["functions"] = o.Functions
	}
	return json.Marshal(toSerialize)
}

type NullableShowModuleByName200ResponseData struct {
	value *ShowModuleByName200ResponseData
	isSet bool
}

func (v NullableShowModuleByName200ResponseData) Get() *ShowModuleByName200ResponseData {
	return v.value
}

func (v *NullableShowModuleByName200ResponseData) Set(val *ShowModuleByName200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableShowModuleByName200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableShowModuleByName200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShowModuleByName200ResponseData(val *ShowModuleByName200ResponseData) *NullableShowModuleByName200ResponseData {
	return &NullableShowModuleByName200ResponseData{value: val, isSet: true}
}

func (v NullableShowModuleByName200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShowModuleByName200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


