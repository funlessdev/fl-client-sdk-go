/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SingleAppResultData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleAppResultData{}

// SingleAppResultData struct for SingleAppResultData
type SingleAppResultData struct {
	Name *string `json:"name,omitempty"`
	Content *string `json:"content,omitempty"`
}

// NewSingleAppResultData instantiates a new SingleAppResultData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleAppResultData() *SingleAppResultData {
	this := SingleAppResultData{}
	return &this
}

// NewSingleAppResultDataWithDefaults instantiates a new SingleAppResultData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleAppResultDataWithDefaults() *SingleAppResultData {
	this := SingleAppResultData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SingleAppResultData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleAppResultData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SingleAppResultData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SingleAppResultData) SetName(v string) {
	o.Name = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SingleAppResultData) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleAppResultData) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SingleAppResultData) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *SingleAppResultData) SetContent(v string) {
	o.Content = &v
}

func (o SingleAppResultData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleAppResultData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableSingleAppResultData struct {
	value *SingleAppResultData
	isSet bool
}

func (v NullableSingleAppResultData) Get() *SingleAppResultData {
	return v.value
}

func (v *NullableSingleAppResultData) Set(val *SingleAppResultData) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleAppResultData) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleAppResultData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleAppResultData(val *SingleAppResultData) *NullableSingleAppResultData {
	return &NullableSingleAppResultData{value: val, isSet: true}
}

func (v NullableSingleAppResultData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleAppResultData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


