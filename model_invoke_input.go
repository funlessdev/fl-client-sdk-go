/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InvokeInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvokeInput{}

// InvokeInput struct for InvokeInput
type InvokeInput struct {
	Args interface{} `json:"args,omitempty"`
}

// NewInvokeInput instantiates a new InvokeInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvokeInput() *InvokeInput {
	this := InvokeInput{}
	return &this
}

// NewInvokeInputWithDefaults instantiates a new InvokeInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvokeInputWithDefaults() *InvokeInput {
	this := InvokeInput{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvokeInput) GetArgs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvokeInput) GetArgsOk() (*interface{}, bool) {
	if o == nil || isNil(o.Args) {
		return nil, false
	}
	return &o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *InvokeInput) HasArgs() bool {
	if o != nil && isNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given interface{} and assigns it to the Args field.
func (o *InvokeInput) SetArgs(v interface{}) {
	o.Args = v
}

func (o InvokeInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvokeInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

type NullableInvokeInput struct {
	value *InvokeInput
	isSet bool
}

func (v NullableInvokeInput) Get() *InvokeInput {
	return v.value
}

func (v *NullableInvokeInput) Set(val *InvokeInput) {
	v.value = val
	v.isSet = true
}

func (v NullableInvokeInput) IsSet() bool {
	return v.isSet
}

func (v *NullableInvokeInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvokeInput(val *InvokeInput) *NullableInvokeInput {
	return &NullableInvokeInput{value: val, isSet: true}
}

func (v NullableInvokeInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvokeInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


