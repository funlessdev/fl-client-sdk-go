/*
Funless Platfom API

The API for the Funless Platform

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FunctionInvocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionInvocation{}

// FunctionInvocation struct for FunctionInvocation
type FunctionInvocation struct {
	Module *string `json:"module,omitempty"`
	Function *string `json:"function,omitempty"`
	Args map[string]interface{} `json:"args,omitempty"`
}

// NewFunctionInvocation instantiates a new FunctionInvocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionInvocation() *FunctionInvocation {
	this := FunctionInvocation{}
	return &this
}

// NewFunctionInvocationWithDefaults instantiates a new FunctionInvocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionInvocationWithDefaults() *FunctionInvocation {
	this := FunctionInvocation{}
	return &this
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *FunctionInvocation) GetModule() string {
	if o == nil || isNil(o.Module) {
		var ret string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionInvocation) GetModuleOk() (*string, bool) {
	if o == nil || isNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *FunctionInvocation) HasModule() bool {
	if o != nil && !isNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given string and assigns it to the Module field.
func (o *FunctionInvocation) SetModule(v string) {
	o.Module = &v
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *FunctionInvocation) GetFunction() string {
	if o == nil || isNil(o.Function) {
		var ret string
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionInvocation) GetFunctionOk() (*string, bool) {
	if o == nil || isNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *FunctionInvocation) HasFunction() bool {
	if o != nil && !isNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given string and assigns it to the Function field.
func (o *FunctionInvocation) SetFunction(v string) {
	o.Function = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *FunctionInvocation) GetArgs() map[string]interface{} {
	if o == nil || isNil(o.Args) {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionInvocation) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Args) {
		return map[string]interface{}{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *FunctionInvocation) HasArgs() bool {
	if o != nil && !isNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *FunctionInvocation) SetArgs(v map[string]interface{}) {
	o.Args = v
}

func (o FunctionInvocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionInvocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !isNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	if !isNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

type NullableFunctionInvocation struct {
	value *FunctionInvocation
	isSet bool
}

func (v NullableFunctionInvocation) Get() *FunctionInvocation {
	return v.value
}

func (v *NullableFunctionInvocation) Set(val *FunctionInvocation) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionInvocation) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionInvocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionInvocation(val *FunctionInvocation) *NullableFunctionInvocation {
	return &NullableFunctionInvocation{value: val, isSet: true}
}

func (v NullableFunctionInvocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionInvocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


