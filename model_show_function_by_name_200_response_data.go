/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ShowFunctionByName200ResponseData struct for ShowFunctionByName200ResponseData
type ShowFunctionByName200ResponseData struct {
	Name *string `json:"name,omitempty"`
	ModuleName *string `json:"module_name,omitempty"`
	CodeSize *int32 `json:"code_size,omitempty"`
}

// NewShowFunctionByName200ResponseData instantiates a new ShowFunctionByName200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShowFunctionByName200ResponseData() *ShowFunctionByName200ResponseData {
	this := ShowFunctionByName200ResponseData{}
	return &this
}

// NewShowFunctionByName200ResponseDataWithDefaults instantiates a new ShowFunctionByName200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShowFunctionByName200ResponseDataWithDefaults() *ShowFunctionByName200ResponseData {
	this := ShowFunctionByName200ResponseData{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ShowFunctionByName200ResponseData) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowFunctionByName200ResponseData) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ShowFunctionByName200ResponseData) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ShowFunctionByName200ResponseData) SetName(v string) {
	o.Name = &v
}

// GetModuleName returns the ModuleName field value if set, zero value otherwise.
func (o *ShowFunctionByName200ResponseData) GetModuleName() string {
	if o == nil || isNil(o.ModuleName) {
		var ret string
		return ret
	}
	return *o.ModuleName
}

// GetModuleNameOk returns a tuple with the ModuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowFunctionByName200ResponseData) GetModuleNameOk() (*string, bool) {
	if o == nil || isNil(o.ModuleName) {
    return nil, false
	}
	return o.ModuleName, true
}

// HasModuleName returns a boolean if a field has been set.
func (o *ShowFunctionByName200ResponseData) HasModuleName() bool {
	if o != nil && !isNil(o.ModuleName) {
		return true
	}

	return false
}

// SetModuleName gets a reference to the given string and assigns it to the ModuleName field.
func (o *ShowFunctionByName200ResponseData) SetModuleName(v string) {
	o.ModuleName = &v
}

// GetCodeSize returns the CodeSize field value if set, zero value otherwise.
func (o *ShowFunctionByName200ResponseData) GetCodeSize() int32 {
	if o == nil || isNil(o.CodeSize) {
		var ret int32
		return ret
	}
	return *o.CodeSize
}

// GetCodeSizeOk returns a tuple with the CodeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowFunctionByName200ResponseData) GetCodeSizeOk() (*int32, bool) {
	if o == nil || isNil(o.CodeSize) {
    return nil, false
	}
	return o.CodeSize, true
}

// HasCodeSize returns a boolean if a field has been set.
func (o *ShowFunctionByName200ResponseData) HasCodeSize() bool {
	if o != nil && !isNil(o.CodeSize) {
		return true
	}

	return false
}

// SetCodeSize gets a reference to the given int32 and assigns it to the CodeSize field.
func (o *ShowFunctionByName200ResponseData) SetCodeSize(v int32) {
	o.CodeSize = &v
}

func (o ShowFunctionByName200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ModuleName) {
		toSerialize["module_name"] = o.ModuleName
	}
	if !isNil(o.CodeSize) {
		toSerialize["code_size"] = o.CodeSize
	}
	return json.Marshal(toSerialize)
}

type NullableShowFunctionByName200ResponseData struct {
	value *ShowFunctionByName200ResponseData
	isSet bool
}

func (v NullableShowFunctionByName200ResponseData) Get() *ShowFunctionByName200ResponseData {
	return v.value
}

func (v *NullableShowFunctionByName200ResponseData) Set(val *ShowFunctionByName200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableShowFunctionByName200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableShowFunctionByName200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShowFunctionByName200ResponseData(val *ShowFunctionByName200ResponseData) *NullableShowFunctionByName200ResponseData {
	return &NullableShowFunctionByName200ResponseData{value: val, isSet: true}
}

func (v NullableShowFunctionByName200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShowFunctionByName200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


