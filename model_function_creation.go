/*
Funless Platfom API

The API for the Funless Platform

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FunctionCreation struct for FunctionCreation
type FunctionCreation struct {
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Code *string `json:"code,omitempty"`
}

// NewFunctionCreation instantiates a new FunctionCreation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionCreation() *FunctionCreation {
	this := FunctionCreation{}
	return &this
}

// NewFunctionCreationWithDefaults instantiates a new FunctionCreation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionCreationWithDefaults() *FunctionCreation {
	this := FunctionCreation{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FunctionCreation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionCreation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FunctionCreation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FunctionCreation) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *FunctionCreation) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionCreation) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *FunctionCreation) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *FunctionCreation) SetNamespace(v string) {
	o.Namespace = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FunctionCreation) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionCreation) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FunctionCreation) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FunctionCreation) SetCode(v string) {
	o.Code = &v
}

func (o FunctionCreation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableFunctionCreation struct {
	value *FunctionCreation
	isSet bool
}

func (v NullableFunctionCreation) Get() *FunctionCreation {
	return v.value
}

func (v *NullableFunctionCreation) Set(val *FunctionCreation) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionCreation) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionCreation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionCreation(val *FunctionCreation) *NullableFunctionCreation {
	return &NullableFunctionCreation{value: val, isSet: true}
}

func (v NullableFunctionCreation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionCreation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


