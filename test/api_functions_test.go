/*
FunLess Platfom API

Testing FunctionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_FunctionsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test FunctionsApiService CreateFunction", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var moduleName string

        resp, httpRes, err := apiClient.FunctionsApi.CreateFunction(context.Background(), moduleName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FunctionsApiService DeleteFunction", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var moduleName string
        var functionName string

        resp, httpRes, err := apiClient.FunctionsApi.DeleteFunction(context.Background(), moduleName, functionName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FunctionsApiService InvokeFunction", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var moduleName string
        var functionName string

        resp, httpRes, err := apiClient.FunctionsApi.InvokeFunction(context.Background(), moduleName, functionName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FunctionsApiService ShowFunctionByName", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var moduleName string
        var functionName string

        resp, httpRes, err := apiClient.FunctionsApi.ShowFunctionByName(context.Background(), moduleName, functionName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test FunctionsApiService UpdateFunction", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var moduleName string
        var functionName string

        resp, httpRes, err := apiClient.FunctionsApi.UpdateFunction(context.Background(), moduleName, functionName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
