/*
FunLess Platfom API

Testing FunctionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/funlessdev/fl-client-sdk-go"
)

func Test_openapi_FunctionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FunctionsAPIService CreateFunction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		httpRes, err := apiClient.FunctionsAPI.CreateFunction(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunctionsAPIService DeleteFunction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string
		var functionName string

		httpRes, err := apiClient.FunctionsAPI.DeleteFunction(context.Background(), moduleName, functionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunctionsAPIService InvokeFunction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string
		var functionName string

		resp, httpRes, err := apiClient.FunctionsAPI.InvokeFunction(context.Background(), moduleName, functionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunctionsAPIService ShowFunctionByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string
		var functionName string

		resp, httpRes, err := apiClient.FunctionsAPI.ShowFunctionByName(context.Background(), moduleName, functionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FunctionsAPIService UpdateFunction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string
		var functionName string

		httpRes, err := apiClient.FunctionsAPI.UpdateFunction(context.Background(), moduleName, functionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
