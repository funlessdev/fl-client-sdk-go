/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MixedResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MixedResults{}

// MixedResults struct for MixedResults
type MixedResults struct {
	Data *MixedResultsData `json:"data,omitempty"`
}

// NewMixedResults instantiates a new MixedResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixedResults() *MixedResults {
	this := MixedResults{}
	return &this
}

// NewMixedResultsWithDefaults instantiates a new MixedResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixedResultsWithDefaults() *MixedResults {
	this := MixedResults{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MixedResults) GetData() MixedResultsData {
	if o == nil || isNil(o.Data) {
		var ret MixedResultsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixedResults) GetDataOk() (*MixedResultsData, bool) {
	if o == nil || isNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MixedResults) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given MixedResultsData and assigns it to the Data field.
func (o *MixedResults) SetData(v MixedResultsData) {
	o.Data = &v
}

func (o MixedResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MixedResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableMixedResults struct {
	value *MixedResults
	isSet bool
}

func (v NullableMixedResults) Get() *MixedResults {
	return v.value
}

func (v *NullableMixedResults) Set(val *MixedResults) {
	v.value = val
	v.isSet = true
}

func (v NullableMixedResults) IsSet() bool {
	return v.isSet
}

func (v *NullableMixedResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixedResults(val *MixedResults) *NullableMixedResults {
	return &NullableMixedResults{value: val, isSet: true}
}

func (v NullableMixedResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixedResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


