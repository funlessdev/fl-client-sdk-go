/*
FunLess Platfom API

The API for the FunLess Platform

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConnectedEvent struct for ConnectedEvent
type ConnectedEvent struct {
	// Type of the event
	Type *string `json:"type,omitempty"`
	// Additional parameters of the event
	Params map[string]interface{} `json:"params,omitempty"`
}

// NewConnectedEvent instantiates a new ConnectedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedEvent() *ConnectedEvent {
	this := ConnectedEvent{}
	return &this
}

// NewConnectedEventWithDefaults instantiates a new ConnectedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedEventWithDefaults() *ConnectedEvent {
	this := ConnectedEvent{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectedEvent) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedEvent) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectedEvent) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectedEvent) SetType(v string) {
	o.Type = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ConnectedEvent) GetParams() map[string]interface{} {
	if o == nil || isNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedEvent) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Params) {
    return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ConnectedEvent) HasParams() bool {
	if o != nil && !isNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *ConnectedEvent) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o ConnectedEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return json.Marshal(toSerialize)
}

type NullableConnectedEvent struct {
	value *ConnectedEvent
	isSet bool
}

func (v NullableConnectedEvent) Get() *ConnectedEvent {
	return v.value
}

func (v *NullableConnectedEvent) Set(val *ConnectedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedEvent(val *ConnectedEvent) *NullableConnectedEvent {
	return &NullableConnectedEvent{value: val, isSet: true}
}

func (v NullableConnectedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


