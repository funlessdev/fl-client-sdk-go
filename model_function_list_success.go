/*
Funless Platfom API

The API for the Funless Platform

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FunctionListSuccess struct for FunctionListSuccess
type FunctionListSuccess struct {
	// The names of the functions in the namespace
	Result []int32 `json:"result,omitempty"`
}

// NewFunctionListSuccess instantiates a new FunctionListSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionListSuccess() *FunctionListSuccess {
	this := FunctionListSuccess{}
	return &this
}

// NewFunctionListSuccessWithDefaults instantiates a new FunctionListSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionListSuccessWithDefaults() *FunctionListSuccess {
	this := FunctionListSuccess{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *FunctionListSuccess) GetResult() []int32 {
	if o == nil || isNil(o.Result) {
		var ret []int32
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionListSuccess) GetResultOk() ([]int32, bool) {
	if o == nil || isNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *FunctionListSuccess) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given []int32 and assigns it to the Result field.
func (o *FunctionListSuccess) SetResult(v []int32) {
	o.Result = v
}

func (o FunctionListSuccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableFunctionListSuccess struct {
	value *FunctionListSuccess
	isSet bool
}

func (v NullableFunctionListSuccess) Get() *FunctionListSuccess {
	return v.value
}

func (v *NullableFunctionListSuccess) Set(val *FunctionListSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionListSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionListSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionListSuccess(val *FunctionListSuccess) *NullableFunctionListSuccess {
	return &NullableFunctionListSuccess{value: val, isSet: true}
}

func (v NullableFunctionListSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionListSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


